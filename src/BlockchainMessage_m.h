//
// Generated file, do not edit! Created by opp_msgtool 6.0 from src/BlockchainMessage.msg.
//

#ifndef __BLOCKCHAINMESSAGE_M_H
#define __BLOCKCHAINMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class BlockchainTransaction;
class ServiceRequest;
class ServiceResponse;
class ServiceRating;
/**
 * Class generated from <tt>src/BlockchainMessage.msg:15</tt> by opp_msgtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * message BlockchainTransaction
 * {
 *     int requesterId;  // ID of the service requester
 *     int providerId;   // ID of the service provider
 *     double rating;    // Rating given by the requester
 * }
 * </pre>
 */
class BlockchainTransaction : public ::omnetpp::cMessage
{
  protected:
    int requesterId = 0;
    int providerId = 0;
    double rating = 0;

  private:
    void copy(const BlockchainTransaction& other);

  protected:
    bool operator==(const BlockchainTransaction&) = delete;

  public:
    BlockchainTransaction(const char *name=nullptr, short kind=0);
    BlockchainTransaction(const BlockchainTransaction& other);
    virtual ~BlockchainTransaction();
    BlockchainTransaction& operator=(const BlockchainTransaction& other);
    virtual BlockchainTransaction *dup() const override {return new BlockchainTransaction(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getRequesterId() const;
    virtual void setRequesterId(int requesterId);

    virtual int getProviderId() const;
    virtual void setProviderId(int providerId);

    virtual double getRating() const;
    virtual void setRating(double rating);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BlockchainTransaction& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BlockchainTransaction& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/BlockchainMessage.msg:20</tt> by opp_msgtool.
 * <pre>
 * message ServiceRequest
 * {
 *     int requesterId;  // ID of the node requesting service
 *     int providerId;   // ID of the node providing service
 * }
 * </pre>
 */
class ServiceRequest : public ::omnetpp::cMessage
{
  protected:
    int requesterId = 0;
    int providerId = 0;

  private:
    void copy(const ServiceRequest& other);

  protected:
    bool operator==(const ServiceRequest&) = delete;

  public:
    ServiceRequest(const char *name=nullptr, short kind=0);
    ServiceRequest(const ServiceRequest& other);
    virtual ~ServiceRequest();
    ServiceRequest& operator=(const ServiceRequest& other);
    virtual ServiceRequest *dup() const override {return new ServiceRequest(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getRequesterId() const;
    virtual void setRequesterId(int requesterId);

    virtual int getProviderId() const;
    virtual void setProviderId(int providerId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServiceRequest& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServiceRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/BlockchainMessage.msg:25</tt> by opp_msgtool.
 * <pre>
 * message ServiceResponse
 * {
 *     int requesterId;  // ID of the original requester
 *     int providerId;   // ID of the service provider
 * }
 * </pre>
 */
class ServiceResponse : public ::omnetpp::cMessage
{
  protected:
    int requesterId = 0;
    int providerId = 0;

  private:
    void copy(const ServiceResponse& other);

  protected:
    bool operator==(const ServiceResponse&) = delete;

  public:
    ServiceResponse(const char *name=nullptr, short kind=0);
    ServiceResponse(const ServiceResponse& other);
    virtual ~ServiceResponse();
    ServiceResponse& operator=(const ServiceResponse& other);
    virtual ServiceResponse *dup() const override {return new ServiceResponse(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getRequesterId() const;
    virtual void setRequesterId(int requesterId);

    virtual int getProviderId() const;
    virtual void setProviderId(int providerId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServiceResponse& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServiceResponse& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/BlockchainMessage.msg:30</tt> by opp_msgtool.
 * <pre>
 * message ServiceRating
 * {
 *     int requesterId;  // ID of the node giving the rating
 *     int providerId;   // ID of the service provider
 *     double rating;    // Rating given for the service
 * }
 * </pre>
 */
class ServiceRating : public ::omnetpp::cMessage
{
  protected:
    int requesterId = 0;
    int providerId = 0;
    double rating = 0;

  private:
    void copy(const ServiceRating& other);

  protected:
    bool operator==(const ServiceRating&) = delete;

  public:
    ServiceRating(const char *name=nullptr, short kind=0);
    ServiceRating(const ServiceRating& other);
    virtual ~ServiceRating();
    ServiceRating& operator=(const ServiceRating& other);
    virtual ServiceRating *dup() const override {return new ServiceRating(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getRequesterId() const;
    virtual void setRequesterId(int requesterId);

    virtual int getProviderId() const;
    virtual void setProviderId(int providerId);

    virtual double getRating() const;
    virtual void setRating(double rating);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ServiceRating& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ServiceRating& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline BlockchainTransaction *fromAnyPtr(any_ptr ptr) { return check_and_cast<BlockchainTransaction*>(ptr.get<cObject>()); }
template<> inline ServiceRequest *fromAnyPtr(any_ptr ptr) { return check_and_cast<ServiceRequest*>(ptr.get<cObject>()); }
template<> inline ServiceResponse *fromAnyPtr(any_ptr ptr) { return check_and_cast<ServiceResponse*>(ptr.get<cObject>()); }
template<> inline ServiceRating *fromAnyPtr(any_ptr ptr) { return check_and_cast<ServiceRating*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __BLOCKCHAINMESSAGE_M_H

